{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 Menlo-Italic;\f5\fswiss\fcharset0 ArialMT;
\f6\froman\fcharset0 Times-Roman;\f7\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red36\green36\blue36;\red240\green240\blue240;\red38\green38\blue38;
\red242\green242\blue242;\red50\green50\blue50;\red228\green228\blue228;\red14\green115\blue192;\red109\green109\blue109;
\red245\green245\blue245;\red70\green67\blue67;\red254\green254\blue254;\red20\green103\blue1;\red16\green120\blue67;
\red19\green85\blue52;\red67\green67\blue67;\red251\green0\blue7;\red26\green158\blue15;\red14\green14\blue14;
\red98\green0\blue117;\red25\green0\blue135;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red38\green71\blue75;\red92\green38\blue153;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qr

\f0\fs24 \cf0 \uc0\u1502 \u1492 \u1501 
\f1  
\f0 \uc0\u1492 \u1513 \u1500 \u1489 \u1497 \u1501 
\f1  
\f0 \uc0\u1513 \u1499 \u1491 \u1488 \u1497 
\f1  
\f0 \uc0\u1500 \u1506 \u1513 \u1493 \u1514 
\f1  
\f0 \uc0\u1499 \u1491 \u1497 
\f1  
\f0 \uc0\u1500 \u1492 \u1513 \u1500 \u1497 \u1501 
\f1  
\f0 \uc0\u1488 \u1514 
\f1  
\f0 \uc0\u1492 \u1506 \u1504 \u1497 \u1497 \u1503 
\f1  
\f0 \uc0\u1492 \u1494 \u1492 
\f1 ?\

\f0 \uc0\u1497 \u1513 
\f1  
\f0 \uc0\u1500 \u1504 \u1493 
\f1  
\f0 \uc0\u1502 \u1505 \u1502 \u1498 
\f1  
\f0 \uc0\u1513 \u1502 \u1504 \u1514 \u1495 
\f1  
\f0 \uc0\u1488 \u1514 
\f1  
\f0 \uc0\u1492 \u1502 \u1506 \u1512 \u1499 \u1514 
\f1  
\f0 \uc0\u1500 \u1508 \u1497 
\f1  
\f0 \uc0\u1492 \u1502 \u1505 \u1499 \u1497 \u1501 
\f1 \

\f0 \uc0\u1502 \u1497 \u1502 \u1497 
\f1  
\f0 \uc0\u1488 \u1491 \u1497 \u1496 \u1493 \u1512 
\f1  
\f0 \uc0\u1493 \u1497 \u1493 
\f1 :\

\f0 \uc0\u1497 \u1513 
\f1  
\f0 \uc0\u1499 \u1488 \u1503 
\f1  
\f0 \uc0\u1502 \u1505 \u1508 \u1512 
\f1  
\f0 \uc0\u1502 \u1513 \u1497 \u1502 \u1493 \u1514 
\f1 :\

\f0 \uc0\u1510 \u1512 \u1497 \u1498 
\f1  
\f0 \uc0\u1500 \u1489 \u1491 \u1493 \u1511 
\f1  
\f0 \uc0\u1488 \u1497 \u1498 
\f1  
\f0 \uc0\u1494 \u1494 \u1492 
\f1  
\f0 \uc0\u1506 \u1493 \u1489 \u1491 
\f1  
\f0 \uc0\u1506 \u1501 
\f1  
\f0 \uc0\u1502 \u1510 \u1500 \u1502 \u1492 
\f1 . \

\f0 \uc0\u1500 \u1488 
\f1  
\f0 \uc0\u1504 \u1497 \u1514 \u1503 
\f1  
\f0 \uc0\u1500 \u1489 \u1495 \u1493 \u1512  \u1489 \u1496 \u1511 \u1505 \u1496  \u1500 \u1508 \u1504 \u1497  \u1513 \u1489 \u1493 \u1495 \u1512 \u1497 \u1501  \u1514 \u1502 \u1493 \u1504 \u1492 , \u1488 \u1497 \u1498  \u1502 \u1497 \u1497 \u1513 \u1502 \u1497 \u1501   \u1494 \u1488 \u1514 , \
\uc0\u1499 \u1504 \u1512 \u1488 \u1492  \u1492 \u1502 \u1505 \u1498  \u1492  \u1512 \u1488 \u1513 \u1493 \u1504 \u1497  \u1492 \u1493 \u1488  \u1500 \u1500 \u1488 , \u1493 \u1488 \u1494  \u1502 \u1488 \u1508 \u1513 \u1512 \u1497 \u1501  \u1506 \u1500  \u1497 \u1491 \u1497  \u1502 \u1504 \u1490 \u1504 \u1493 \u1503  \u1513 \u1500  show \u1493 hide \u1500 \u1492 \u1499 \u1504 \u1497 \u1505  \u1488 \u1514  \u1492 \u1496 \u1511 \u1505 \u1496 \u1497 \u1501 .\
\uc0\u1500 \u1508 \u1504 \u1497  \u1513 \u1492 \u1493 \u1497 \u1493  \u1502 \u1493 \u1508 \u1497 \u1506  \u1502 \u1491 \u1500 \u1497 \u1511 \u1497 \u1501  \u1493 \u1502 \u1499 \u1489 \u1497 \u1501  \u1488 \u1514  \u1502 \u1492  \u1513 \u1510 \u1512 \u1497 \u1498 , \u1489 \u1502 \u1511 \u1512 \u1492  \u1492 \u1494 \u1492 , \u1502 \u1491 \u1500 \u1497 \u1511 \u1497 \u1501  \u1488 \u1514  \u1492 \u1492 \u1493 \u1491 \u1506 \u1492  \u1513 \u1494 \u1492  \u1500 \u1497 \u1497 \u1489 \u1500  \
\
\
\uc0\u1502 \u1513 \u1514 \u1502 \u1513 : \u1502 \u1508 \u1506 \u1497 \u1500  \u1488 \u1514  \u1492 \u1488 \u1508 \u1500 \u1497 \u1511 \u1510 \u1497 \u1492  \u1512 \u1493 \u1488 \u1492  \u1500 \u1497 \u1497 \u1489 \u1500  \u1513 \u1488 \u1493 \u1502 \u1512 \u1514  \u1500 \u1493  \u1488 \u1504 \u1488  \u1489 \u1495 \u1512  \u1514 \u1502 \u1493 \u1504 \u1492  \u1489 \u1502 \u1512 \u1499 \u1494  \u1492 \u1488 \u1508 \u1500 \u1497 \u1511 \u1510 \u1497 \u1492 \
\uc0\u1511 \u1493 \u1491 : \u1500 \u1499 \u1514 \u1493 \u1489  \u1489 \u1505 \u1496 \u1493 \u1512 \u1497 \u1489 \u1493 \u1512 \u1491  \u1493 \u1500 \u1511 \u1513 \u1512  \u1506 \u1501  \u1492 \u1493 \u1497 \u1493  \
\uc0\u1500 \u1492 \u1490 \u1491 \u1497 \u1512  \u1502 \u1492  \u1511 \u1493 \u1512 \u1492  \
\
\uc0\u1502 \u1513 \u1514 \u1502 \u1513 : \u1489 \u1493 \u1495 \u1512  \u1489 \u1514 \u1502 \u1493 \u1504 \u1492 .\
\uc0\u1511 \u1493 \u1491 : \u1511 \u1497 \u1497 \u1501 . \
\
\uc0\u1502 \u1513 \u1514 \u1502 \u1513 : \u1512 \u1493 \u1488 \u1492  \u1514 \u1502 \u1493 \u1504 \u1492  \u1506 \u1500  \u1492 \u1510 \u1490 , \u1502 \u1493 \u1510 \u1490 \u1493 \u1514  \u1513 \u1514 \u1497  \u1492 \u1514 \u1497 \u1489 \u1493 \u1514  + \u1492 \u1504 \u1495 \u1497 \u1493 \u1514  \u1500 \u1502 \u1506 \u1500 \u1492  \u1493 \u1500 \u1502 \u1496 \u1492 . \u1499 \u1513 \u1500 \u1493 \u1495 \u1509  \u1488 \u1504 \u1496 \u1512  \u1492 \u1514 \u1497 \u1489 \u1493 \u1514  \u1500 \u1502 \u1496 \u1492  \u1504 \u1506 \u1500 \u1502 \u1493 \u1514 . \
\uc0\u1511 \u1493 \u1491 : \u1500 \u1492 \u1490 \u1491 \u1497 \u1512  \u1500 \u1497 \u1497 \u1489 \u1500  \
\uc0\u1500 \u1506 \u1513 \u1493 \u1514  \u1492 \u1510 \u1490  \u1500 \u1514 \u1497 \u1489 \u1493 \u1514  \u1493 \u1500 \u1500 \u1497 \u1497 \u1489 \u1500 \u1497 \u1501 \
\uc0\u1500 \u1488 \u1495 \u1512  \u1500 \u1495 \u1497 \u1510 \u1514  \u1492 \u1488 \u1504 \u1496 \u1512  \u1492 \u1496 \u1511 \u1505 \u1496  \u1502 \u1508 \u1493 \u1512 \u1502 \u1496  \u1493 \u1490 \u1501  \u1502 \u1506 \u1491 \u1499 \u1503  \u1488 \u1514  \u1492 \u1513 \u1491 \u1492  \u1492 \u1512 \u1500 \u1493 \u1493 \u1504 \u1496 \u1497  \u1513 \u1500  \u1492 \u1493 \u1493 \u1497 \u1493 , \u1500 \u1495 \u1497 \u1510 \u1492  \u1504 \u1493 \u1505 \u1508 \u1514  \u1500 \u1488  \u1495 \u1497 \u1497 \u1489 \u1514  \u1500 \u1502 \u1495 \u1493 \u1511  \u1488 \u1514  \u1492 \u1499 \u1500 ,   \
\
\uc0\u1492 \u1513 \u1497 \u1497 \u1512  \u1504 \u1506 \u1513 \u1492  \u1508 \u1506 \u1497 \u1500  \u1512 \u1511  \u1500 \u1488 \u1495 \u1512  \u1489 \u1495 \u1497 \u1512 \u1514  \u1492 \u1514 \u1502 \u1493 \u1504 \u1492 .\
\uc0\u1500 \u1499 \u1514 \u1493 \u1489  \u1511 \u1493 \u1491  \u1513 \u1504 \u1511 \u1512 \u1488  sharememe.  \u1492 \u1511 \u1493 \u1491  \u1502 \u1497 \u1497 \u1510 \u1512  \u1488 \u1514  \u1492 \u1491 \u1489 \u1512 \u1497 \u1501  \u1492 \u1489 \u1488 \u1497 \u1501 :\
 \uc0\u1488 . \u1502 \u1497 \u1497 \u1510 \u1512  \u1488 \u1514  \u1492 \u1488 \u1497 \u1502 \u1490  \u1493 \u1495 \u1493 \u1514 \u1498  \u1488 \u1493 \u1514 \u1493  \u1499 \u1502 \u1493  \u1513 \u1510 \u1512 \u1497 \u1498  \u1506 \u1500  \u1497 \u1491 \u1497  \u1502 \u1514 \u1493 \u1491 \
\uc0\u1489 . \u1502 \u1506 \u1489 \u1497 \u1512  \u1488 \u1493 \u1514 \u1493  \u1500 \u1488 \u1511 \u1496 \u1497 \u1489 \u1497 \u1496 \u1497  \u1493 \u1497 \u1493  \u1499 \u1502 \u1493  \u1513 \u1500 \u1502 \u1491 \u1504 \u1493  \u1489 \u1492 \u1514 \u1495 \u1500 \u1492 , \
\uc0\u1490 . completionWithItemsHandler \u1500 \u1508 \u1512 \u1497 \u1496  \u1513 \u1501  \u1513 \u1500  \u1508 \u1493 \u1504 \u1511 \u1510 \u1497 \u1492  \u1489 \u1508 \u1493 \u1504 \u1511 \u1510 \u1497 \u1492  \u1510 \u1512 \u1497 \u1498  \
\uc0\u1491 . \u1500 \u1497 \u1497 \u1510 \u1512  \u1488 \u1514  \u1492 \u1511 \u1493 \u1504 \u1505 \u1496 \u1512 \u1511 \u1496 \u1493 \u1512  \u1488 \u1514  \u1492 \u1488 \u1493 \u1489 \u1497 \u1497 \u1511 \u1496 , \u1493 \u1500 \u1497 \u1510 \u1493 \u1512  \u1488 \u1493 \u1514 \u1493 \
\uc0\u1492 . \u1500 \u1513 \u1495 \u1512 \u1512  \u1488 \u1514  \u1492 \u1493 \u1493 \u1497 \u1493  \
\uc0\u1502 \u1513 \u1514 \u1502 \u1513 : \u1500 \u1493 \u1495 \u1509  \u1506 \u1500  \u1492 \u1513 \u1497 \u1497 \u1512 , \u1493 \u1488 \u1494  \u1504 \u1493 \u1510 \u1512  \u1492 \u1488 \u1493 \u1489 \u1497 \u1497 \u1511 \u1496 . \u1493 \u1502 \u1502 \u1513 \u1497 \u1499 \u1497 \u1501  \u1492 \u1500 \u1488 \u1492 , \
\uc0\u1492 \u1500 \u1495 \u1497 \u1510 \u1492  \u1506 \u1500  \u1492 -share  \u1497 \u1493 \u1510 \u1512 \u1514  \u1488 \u1514  \u1492 \u1513 \u1491 \u1492 , \u1488 \u1493  \u1513 \u1514 \u1492 \u1497 \u1497 \u1492  \u1500 \u1495 \u1497 \u1510 \u1492  \u1506 \u1500  \u1492 \u1505 \u1497 \u1497 \u1489 , \u1510 \u1512 \u1497 \u1498  \u1500 \u1489 \u1491 \u1493 \u1511  \u1492 \u1488 \u1501  \u1492 \u1488 \u1511 \u1496 \u1497 \u1493 \u1493 \u1497 \u1496 \u1497  \u1493 \u1497 \u1493  \u1502 \u1488 \u1508 \u1513 \u1512 \u1514  \u1488 \u1514  \u1494 \u1492 , \
\
\pard\pardeftab720\sl476\sa300

\f2\b\fs28 \cf2 \expnd0\expndtw0\kerning0
Save the meme.
\b0 \expnd0\expndtw0\kerning0
 After the ActivityViewController has done its work, it's time to save the meme. The UIActivityViewController class has a 
\f3\fs26 \cb3 \expnd0\expndtw0\kerning0
completionWithItemsHandler
\f2\fs28 \cb1 \expnd0\expndtw0\kerning0
 property. In the completion handler you can specify methods you would like to be called once an activity, like sharing a meme, has been completed. So here in the completion handler is a good place to call the Meme initialization method you saw in the previous node:\
\pard\pardeftab720\sl440

\f3\fs26 \cf4 \cb5 \expnd0\expndtw0\kerning0
func save() \{\
    //Create the meme\
    var meme = Meme( text: textField.text!, image:       \
    imageView.image, memedImage: memedImage) \
\}\
\pard\pardeftab720\sl476\sa300

\f2\b\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
Dismiss the Activity View.
\b0 \expnd0\expndtw0\kerning0
 Finally, after the Meme object has been saved the activity view should be dismissed. You can also call the 
\f3\fs26 \cb3 \expnd0\expndtw0\kerning0
dismissViewControllerAnimated
\f2\fs28 \cb1 \expnd0\expndtw0\kerning0
 method in the completion handler.\
\

\itap1\trowd \taflags3 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\i\fs24 \cf6 \expnd0\expndtw0\kerning0
activityType
\f1\i0\fs20 \cf0 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
The type of the service that was selected by the user. For custom services, this is the value returned by the {\field{\*\fldinst{HYPERLINK "file:///Users/einatfroast/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.iOS.docset/Contents/Resources/Documents/documentation/UIKit/Reference/UIActivity_Class/index.html#//apple_ref/occ/instm/UIActivity/activityType"}}{\fldrslt 
\f3\fs24 \cf8 \expnd0\expndtw0\kerning0
activityType}} method of a 
\f3\fs24 \cf9 \expnd0\expndtw0\kerning0
UIActivity
\f1\fs28 \cf6 \expnd0\expndtw0\kerning0
 object. For system-defined activities, it is one of the strings listed in "Built-in Activity Types\'94 in {\field{\*\fldinst{HYPERLINK "file:///Users/einatfroast/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.iOS.docset/Contents/Resources/Documents/documentation/UIKit/Reference/UIActivity_Class/index.html#//apple_ref/doc/uid/TP40011974"}}{\fldrslt 
\i \cf8 \expnd0\expndtw0\kerning0
UIActivity Class Reference}}.\cell \row

\itap1\trowd \taflags3 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\i\fs24 \cf6 \expnd0\expndtw0\kerning0
completed
\f1\i0\fs20 \cf0 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\pardeftab720

\f3\fs24 \cf9 \expnd0\expndtw0\kerning0
YES
\f1\fs28 \cf6 \expnd0\expndtw0\kerning0
 if the service was performed or 
\f3\fs24 \cf9 \expnd0\expndtw0\kerning0
NO
\f1\fs28 \cf6 \expnd0\expndtw0\kerning0
 if it was not. This parameter is also set to 
\f3\fs24 \cf9 \expnd0\expndtw0\kerning0
NO
\f1\fs28 \cf6 \expnd0\expndtw0\kerning0
 when the user dismisses the view controller without selecting a service.\cell \row

\itap1\trowd \taflags3 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\i\fs24 \cf6 \expnd0\expndtw0\kerning0
returnedItems
\f1\i0\fs20 \cf0 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
An array of {\field{\*\fldinst{HYPERLINK "file:///Users/einatfroast/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.iOS.docset/Contents/Resources/Documents/documentation/Foundation/Reference/NSExtensionItem_Class/index.html#//apple_ref/occ/cl/NSExtensionItem"}}{\fldrslt 
\f3\fs24 \cf8 \expnd0\expndtw0\kerning0
NSExtensionItem}} objects containing any modified data. Use the items in this array to get any changes made to the original data by an extension. If no items were modified, the value of this parameter is 
\f3\fs24 \cf9 \expnd0\expndtw0\kerning0
nil
\f1\fs28 \cf6 \expnd0\expndtw0\kerning0
.\cell \row

\itap1\trowd \taflags3 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt100 \clpadl200 \clpadb100 \clpadr500 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\i\fs24 \cf6 \expnd0\expndtw0\kerning0
activityError
\f1\i0\fs20 \cf0 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\pardeftab720

\fs28 \cf6 \expnd0\expndtw0\kerning0
An error object if the activity failed to complete, or 
\f3\fs24 \cf9 \expnd0\expndtw0\kerning0
nil
\f1\fs28 \cf6 \expnd0\expndtw0\kerning0
 if the the activity completed normally.\cell \lastrow\row
\pard\pardeftab720\sl320

\f5\fs26 \cf0 \cb10 \expnd0\expndtw0\kerning0
avc.completionWithItemsHandler = ^(NSString *activityType, BOOL completed, NSArray *returnedItems, NSError *activityError)
\f2\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qr

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\sl608

\f6\fs38 \cf11 \cb12 \expnd0\expndtw0\kerning0
And now for the swift version:\
\
\

\f0 \cb1 \uc0\u1510 \u1493 \u1512 
\f6  
\f0 \uc0\u1502 \u1500 \u1489 \u1503 
\f6 \
\pard\pardeftab720\sl608

\f7 \cf13 \cb12 \expnd0\expndtw0\kerning0
let\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
redBox\cf11 \expnd0\expndtw0\kerning0
 = \cf13 \expnd0\expndtw0\kerning0
UIView\cf11 \expnd0\expndtw0\kerning0
(\cf13 \expnd0\expndtw0\kerning0
frame\cf11 \expnd0\expndtw0\kerning0
: \cf14 \expnd0\expndtw0\kerning0
CGRectMake\cf11 \expnd0\expndtw0\kerning0
(\cf15 \expnd0\expndtw0\kerning0
0\cf11 \expnd0\expndtw0\kerning0
, \cf15 \expnd0\expndtw0\kerning0
0\cf11 \expnd0\expndtw0\kerning0
, \cf15 \expnd0\expndtw0\kerning0
100\cf11 \expnd0\expndtw0\kerning0
, \cf15 \expnd0\expndtw0\kerning0
100\cf11 \expnd0\expndtw0\kerning0
))\
    \cf13 \expnd0\expndtw0\kerning0
redBox\cf16 \expnd0\expndtw0\kerning0
.backgroundColor\cf11 \expnd0\expndtw0\kerning0
 = \cf13 \expnd0\expndtw0\kerning0
UIColor\cf16 \expnd0\expndtw0\kerning0
.redColor\cf11 \expnd0\expndtw0\kerning0
()\
    \cf13 \expnd0\expndtw0\kerning0
self\cf16 \expnd0\expndtw0\kerning0
.view.addSubview\cf11 \expnd0\expndtw0\kerning0
(\cf13 \expnd0\expndtw0\kerning0
redBox\cf11 \expnd0\expndtw0\kerning0
)\
        \
    \cf13 \expnd0\expndtw0\kerning0
UIView\cf16 \expnd0\expndtw0\kerning0
.animateWithDuration\cf11 \expnd0\expndtw0\kerning0
(\cf15 \expnd0\expndtw0\kerning0
1\cf11 \expnd0\expndtw0\kerning0
, \cf13 \expnd0\expndtw0\kerning0
animations\cf11 \expnd0\expndtw0\kerning0
:  \{() \cf17 \expnd0\expndtw0\kerning0
in\cf11 \expnd0\expndtw0\kerning0
\
       \cf17 \expnd0\expndtw0\kerning0
redBox.alpha\cf11 \expnd0\expndtw0\kerning0
 = \cf15 \expnd0\expndtw0\kerning0
0\cf11 \expnd0\expndtw0\kerning0
\
      \}, \cf13 \expnd0\expndtw0\kerning0
completion\cf11 \expnd0\expndtw0\kerning0
:\{(\cf17 \expnd0\expndtw0\kerning0
Bool\cf11 \expnd0\expndtw0\kerning0
)  \cf17 \expnd0\expndtw0\kerning0
in\cf11 \expnd0\expndtw0\kerning0
\
        \cf17 \expnd0\expndtw0\kerning0
println\cf11 \expnd0\expndtw0\kerning0
(\cf18 \expnd0\expndtw0\kerning0
"red box has faded out"\cf11 \expnd0\expndtw0\kerning0
)\
      \})\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608

\f6 \cf11 \cb12 \expnd0\expndtw0\kerning0
Much to the dismay of rabbits and near-sighted developers, carrots 
\b \expnd0\expndtw0\kerning0
( ^ )
\b0 \expnd0\expndtw0\kerning0
 are nowhere to be found (yet) in Swift. Rest in peace old friend, you have been replaced by the keyword 'in'. \'a0You use the keyword 'in' once you have finished declaring the parameters and the return values for\'a0your closure. This will make more sense if I show you what autocomplete filled in once it knew what method I wanted:\cb1 \
\pard\pardeftab720\sl608

\f7 \cf13 \cb12 \expnd0\expndtw0\kerning0
UIView\cf16 \expnd0\expndtw0\kerning0
.animateWithDuration\cf11 \expnd0\expndtw0\kerning0
(\cf13 \expnd0\expndtw0\kerning0
duration\cf11 \expnd0\expndtw0\kerning0
: \cf14 \expnd0\expndtw0\kerning0
NSTimeInterval\cf11 \expnd0\expndtw0\kerning0
, \
                         \cf13 \expnd0\expndtw0\kerning0
animations\cf11 \expnd0\expndtw0\kerning0
: (() -> \cf13 \expnd0\expndtw0\kerning0
Void\cf11 \expnd0\expndtw0\kerning0
)?, \
                         \cf13 \expnd0\expndtw0\kerning0
completion\cf11 \expnd0\expndtw0\kerning0
: ((\cf13 \expnd0\expndtw0\kerning0
Bool\cf11 \expnd0\expndtw0\kerning0
) -> \cf13 \expnd0\expndtw0\kerning0
Void\cf11 \expnd0\expndtw0\kerning0
)?)\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608

\f6 \cf11 \cb12 \expnd0\expndtw0\kerning0
Focusing on this syntax, it becomes clear how to properly write the parameters and return values of a closure:\'a0\cb1 \
\pard\pardeftab720\sl608

\f7 \cf11 \cb12 \expnd0\expndtw0\kerning0
\{(\cf17 \expnd0\expndtw0\kerning0
parameters\cf11 \expnd0\expndtw0\kerning0
) -> (\cf17 \expnd0\expndtw0\kerning0
return\cf11 \expnd0\expndtw0\kerning0
 \cf17 \expnd0\expndtw0\kerning0
type\cf11 \expnd0\expndtw0\kerning0
) \cf17 \expnd0\expndtw0\kerning0
in\cf11 \expnd0\expndtw0\kerning0
 \cf17 \expnd0\expndtw0\kerning0
expression\cf11 \expnd0\expndtw0\kerning0
 \cf17 \expnd0\expndtw0\kerning0
statements\cf11 \expnd0\expndtw0\kerning0
\}\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608\sa380

\f6 \cf11 \cb12 \expnd0\expndtw0\kerning0
In the Swift example code above, both of the animation closures returned void, so we could drop the return type syntax all together. Thats why you only see the 
\b \expnd0\expndtw0\kerning0
( )
\b0 \expnd0\expndtw0\kerning0
 for the parameters. Notice that even if there is no parameters, like in the first closure, you still need those empty 
\b \expnd0\expndtw0\kerning0
( )
\b0 \expnd0\expndtw0\kerning0
 before the keyword 
\i\b \expnd0\expndtw0\kerning0
in
\i0\b0 \expnd0\expndtw0\kerning0
. They are 
\b \expnd0\expndtw0\kerning0
required.
\b0 \expnd0\expndtw0\kerning0
\'a0
\b \expnd0\expndtw0\kerning0
Bolded so you learn it, learn it good.
\b0 \cb1 \expnd0\expndtw0\kerning0
\
\cb12 \expnd0\expndtw0\kerning0
Okay, now let's try writing our own Swift method with a completion closure. In the Github repository linked at the bottom of this post, I have been working on a Github client app in Swift with a team of Code Fellows. In this project we have a network controller that handles all of the asynchronous network calls to Github's API.\cb1 \expnd0\expndtw0\kerning0
\
\cb12 \expnd0\expndtw0\kerning0
Let's write a method that retrieves a list of users from a search query on the client. This method will need a completion closure to let the requesting View Controller know when the network call is finished, and provide an array of User models to populate our collection view.\'a0\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608
\cf11 \cb12 \expnd0\expndtw0\kerning0
Heres what the signature of the function would look like:\cb1 \
\pard\pardeftab720\sl608

\f7 \cf13 \cb12 \expnd0\expndtw0\kerning0
func\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
searchUsersWithSearchTerm\cf11 \expnd0\expndtw0\kerning0
(\cf13 \expnd0\expndtw0\kerning0
searchTerm\cf11 \expnd0\expndtw0\kerning0
: \cf14 \expnd0\expndtw0\kerning0
String\cf11 \expnd0\expndtw0\kerning0
, \
                        \cf13 \expnd0\expndtw0\kerning0
completionClosure\cf11 \expnd0\expndtw0\kerning0
: (\cf13 \expnd0\expndtw0\kerning0
users\cf11 \expnd0\expndtw0\kerning0
 :\cf14 \expnd0\expndtw0\kerning0
User\cf11 \expnd0\expndtw0\kerning0
[]) ->()) \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608

\f6 \cf11 \cb12 \expnd0\expndtw0\kerning0
We've got 2 parameters here, a string type called searchTerm, and then our completion closure. \'a0Notice the syntax in the closure parameter? \'a0First is the name of our closure, which is how we will call it later in the method, then the parameter (array of Users), followed by our return value (void). Below is an approximation of what the body of this method looks like:\cb1 \
\pard\pardeftab720\sl608

\f7 \cf11 \cb12 \expnd0\expndtw0\kerning0
//\cf13 \expnd0\expndtw0\kerning0
setup\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
a\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
NSMutableRequest\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
with\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
the\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
correct\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
API\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
URL\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
and\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
parameters\cf11 \expnd0\expndtw0\kerning0
\
//\cf13 \expnd0\expndtw0\kerning0
setup\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
a\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
dataTask\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
on\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
our\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
NSURLSession\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
instance\cf11 \expnd0\expndtw0\kerning0
\
\
//\cf13 \expnd0\expndtw0\kerning0
once\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
our\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
datatask\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
has\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
successfully\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
retrieved\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
the\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
data\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
we\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
wanted\cf11 \expnd0\expndtw0\kerning0
,  \cf13 \expnd0\expndtw0\kerning0
and\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
we\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
have\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
parsed\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
through\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
it\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
to\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
create\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
an\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
array\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
of\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
User\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
Models\cf11 \expnd0\expndtw0\kerning0
, \cf13 \expnd0\expndtw0\kerning0
we\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
call\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
our\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
completion\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
closure\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
like\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
this\cf11 \expnd0\expndtw0\kerning0
:\
\
\cf14 \expnd0\expndtw0\kerning0
var\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
users\cf11 \expnd0\expndtw0\kerning0
 : \cf14 \expnd0\expndtw0\kerning0
User\cf11 \expnd0\expndtw0\kerning0
[] = //\cf13 \expnd0\expndtw0\kerning0
Parse\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
the\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
JSON\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
data\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
into\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
Users\cf11 \expnd0\expndtw0\kerning0
\
\
\cf13 \expnd0\expndtw0\kerning0
competionClosure\cf11 \expnd0\expndtw0\kerning0
(\cf13 \expnd0\expndtw0\kerning0
users\cf11 \expnd0\expndtw0\kerning0
: \cf14 \expnd0\expndtw0\kerning0
users\cf11 \expnd0\expndtw0\kerning0
)\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608\sa380

\f6 \cf11 \cb12 \expnd0\expndtw0\kerning0
Calling our completion closure is nearly the exact same way calling our completion block would be in Objective-C. It's called just like any other function, and we make sure to pass in an array as a parameter, since thats how we defined up in our function signature. I purposely left out all the networking code to keep this blog post as short as I could, but feel free to check out the {\field{\*\fldinst{HYPERLINK "https://github.com/bradleypj823/Swift-GithubToGo"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
Github repository}} if you are interested in seeing how it works. We will have a blog post up on network in Swift in the near future.\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608
\cf11 \cb12 \expnd0\expndtw0\kerning0
Finally, lets take a look at how we would call this method from our SearchUsersViewController:\cb1 \
\pard\pardeftab720\sl608

\f7 \cf13 \cb12 \expnd0\expndtw0\kerning0
self\cf16 \expnd0\expndtw0\kerning0
.networkController\cf20 \expnd0\expndtw0\kerning0
!\cf16 \expnd0\expndtw0\kerning0
.searchUsers\cf11 \expnd0\expndtw0\kerning0
(\cf18 \expnd0\expndtw0\kerning0
"Dr. Dre"\cf11 \expnd0\expndtw0\kerning0
) \{ (\cf17 \expnd0\expndtw0\kerning0
users\cf11 \expnd0\expndtw0\kerning0
: User[]) in\
    self\cf16 \expnd0\expndtw0\kerning0
.searchUsers\cf11 \expnd0\expndtw0\kerning0
 = users\
    NSOperationQueue\cf16 \expnd0\expndtw0\kerning0
.mainQueue\cf11 \expnd0\expndtw0\kerning0
()\cf16 \expnd0\expndtw0\kerning0
.addOperationWithBlock\cf11 \expnd0\expndtw0\kerning0
() \{ () \cf17 \expnd0\expndtw0\kerning0
in\cf11 \expnd0\expndtw0\kerning0
\
        \cf17 \expnd0\expndtw0\kerning0
self.collectionView.reloadData\cf11 \expnd0\expndtw0\kerning0
()\
    \}\
\}\
\pard\pardeftab720\sl608

\f6 \cf11 \expnd0\expndtw0\kerning0
One more thing I want to you notice is how I called addOperationWIthBlock() on our mainQueue(). If a closure is the last parameter of a function's signature, you can use special syntax to make it even more clean. This is referred to as a 
\b \expnd0\expndtw0\kerning0
Trailing Closure
\b0 \expnd0\expndtw0\kerning0
. 
\b \expnd0\expndtw0\kerning0
Trailing Closures
\b0 \expnd0\expndtw0\kerning0
 are written directly after the 
\b \expnd0\expndtw0\kerning0
( )
\b0 \expnd0\expndtw0\kerning0
's of a function call. Below is a function call, first with a regular closure, then with a trailing closure.\cb1 \
\pard\pardeftab720\sl608

\f7 \cf11 \cb12 \expnd0\expndtw0\kerning0
//\cf13 \expnd0\expndtw0\kerning0
regular\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
closure\cf11 \expnd0\expndtw0\kerning0
\
\cf13 \expnd0\expndtw0\kerning0
doSomethingAwesome\cf11 \expnd0\expndtw0\kerning0
(\{ (\cf17 \expnd0\expndtw0\kerning0
isAwesome\cf11 \expnd0\expndtw0\kerning0
 : Bool) in\
  //\cf21 \expnd0\expndtw0\kerning0
inside\cf11 \expnd0\expndtw0\kerning0
 our closure\
\})\
//\cf13 \expnd0\expndtw0\kerning0
trailing\cf11 \expnd0\expndtw0\kerning0
 \cf13 \expnd0\expndtw0\kerning0
closure\cf11 \expnd0\expndtw0\kerning0
\
\cf13 \expnd0\expndtw0\kerning0
doSomethingAwesomer\cf11 \expnd0\expndtw0\kerning0
()\{ (\cf17 \expnd0\expndtw0\kerning0
isAwesomer\cf11 \expnd0\expndtw0\kerning0
 : Bool) in\
  //\cf21 \expnd0\expndtw0\kerning0
inside\cf11 \expnd0\expndtw0\kerning0
 our closure\
\}\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608\sa380

\f6 \cf11 \cb12 \expnd0\expndtw0\kerning0
It's a subtle difference, and both ways work. Just remember it has to be the last parameter of the function in order to use the trailing closure syntax.\cb1 \expnd0\expndtw0\kerning0
\
\cb12 \expnd0\expndtw0\kerning0
Now you should know the basic syntax of Closures in Swift. For some more advanced level stuff on Closures, check out the {\field{\*\fldinst{HYPERLINK "https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11#"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
Swift Programming Language on iBooks}}, it has an entire subsection on them.{\field{\*\fldinst{HYPERLINK "https://github.com/bradleypj823/Swift-GithubToGo"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
And here's the link to the github client project}}.\cb1 \expnd0\expndtw0\kerning0
\
\cb12 \expnd0\expndtw0\kerning0
There's also already a Swift counterpart to {\field{\*\fldinst{HYPERLINK "http://fuckingblocksyntax.com/"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
fuckingblocksyntax.com}} called, you guessed it,{\field{\*\fldinst{HYPERLINK "http://fuckingclosuresyntax.com/"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
fuckingclosuresyntax.com}} that's definitely worth adding to your bookmarks bar as you learn Swift.\'a0\cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl608
\cf11 \cb12 \expnd0\expndtw0\kerning0
Good Day.\
\
What is happening here:\
1. editor view controller\
2. 
\f0 \expnd0\expndtw0\kerning0
UI Tab controller\
3. editor view controller
\f6 \expnd0\expndtw0\kerning0
\
\
\pard\tx529\pardeftab529\pardirnatural

\f3\fs22 \cf0 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0  \cf22 //show sent memes when starting the app with existing listed memes.\
\cf0         \cf23 if\cf0  \cf24 firstAppearance\cf0  == \cf23 true\cf0  && \cf24 memeListHasItems\cf0  == \cf23 true\cf0  \{\
          \cf25 goToMemeList\cf0 ()\
       \}\
        \cf23 if\cf0  \cf24 memeListHasItems\cf0  == \cf23 true\cf0  \{\
            \cf24 cancelButton\cf0 .\cf26 enabled\cf0  = \cf23 true\cf0           \
        \}
\f6\fs38 \cf11 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qr

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
}